import React, {useState, useRef, useEffect, Fragment, Suspense} from 'react';

import {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';
import {RootState, AppThunk} from '../state/store';


export type nullable<T> = (T | null);

export interface GlobalState {
    light: boolean;
    lastUpdate: string;
}

const initialState: GlobalState = {
    light: false,
    lastUpdate: null
};

// selector allows us to select a value from the state.
// this is used like this: const count = useAppSelector(selectCount);

export const selectGlobalState = (state: RootState) => state.globalState;
export const selectLastUpdate = (state: RootState) => state.globalState.lastUpdate;
export const selectLight = (state: RootState) => state.globalState.light;

export const globalStateSlice = createSlice({
    name: 'counter',
    initialState,
    reducers: {
        // decrement: (state) => {
        //     state.value -= 1;
        // },

        toggleLight: (state:GlobalState) => {
            state.light = !state.light;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        setLastUpdate: (state:GlobalState, action: PayloadAction<string>) => {
            state.lastUpdate = action.payload;
        },

        // createPost(state:GlobalState, action: PayloadAction<post>) {
        // },
        // updatePost(state:GlobalState, action: PayloadAction<post>) {
        // },
        // deletePost(state:GlobalState, action: PayloadAction<post>) {
        // },
    },

    //should axios data , be saved in swr cache or redux store thunks? get with swr , create/update/delete with thunk

    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including async  actions generated by createAsyncThunk or in other slices.

    // extraReducers: (builder) => {
    //     builder
    //         .addCase(updateUser.fulfilled, (state, action) => {
    //             state.value += action.payload;
    //         });
    // },
});


//  Thunks are typically used to make async requests. , but not for fetching data , but for write/post operations
// export const updateUser = createAsyncThunk(
//     'users/update',
//     async (userData, {rejectWithValue}) => {
//         const {id} = userData
//         try {
//             const response = await userAPI.updateById(id, userData);
//             // The value we return becomes the `fulfilled` action payload
//             return response.data.user;
//         } catch (err) {
//             // Use `err.response.data` as `action.payload` for a `rejected` action,
//             // by explicitly returning it using the `rejectWithValue()` utility
//             return rejectWithValue(err.response.data)
//         }
//     }
// )
//https://redux.js.org/usage/usage-with-typescript


export const {
    toggleLight,
    setLastUpdate
} = globalStateSlice.actions;
export default globalStateSlice.reducer;
